[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "DSPy\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 13, 2024\n\n\nChris Levy\n\n\n\n\n\n\n  \n\n\n\n\nBasic Transformer Architecture Notes\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 3, 2024\n\n\nChris Levy\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/basic_transformer_notes/transformers.html",
    "href": "posts/basic_transformer_notes/transformers.html",
    "title": "Basic Transformer Architecture Notes",
    "section": "",
    "text": "Here are some notes on the basic transformer architecture for my personal learning and understanding. Useful as a secondary resource, not the first stop. There are many resources out there, but here are several I enjoyed learning from:\n\nChapter 3 of the book Natural Language Processing With Transformers (Tunstall, Von Werra, and Wolf 2022)\nAndrej Karpathy’s video Let’s build GPT: from scratch, in code, spelled out (Karpathy 2023)\nSebastian Raschka’s Blog Post Understanding and Coding Self-Attention, Multi-Head Attention, Cross-Attention, and Causal-Attention in LLMs (Raschka 2024)\nOmar Sanseviero’s Blog Post The Random Transformer (Sanseviero 2024)\nThe Illustrated Transformer (Alammar 2018)\nThe original paper: Attention Is All You Need (Vaswani et al. 2017)"
  },
  {
    "objectID": "posts/basic_transformer_notes/transformers.html#multi-head-attention",
    "href": "posts/basic_transformer_notes/transformers.html#multi-head-attention",
    "title": "Basic Transformer Architecture Notes",
    "section": "Multi Head Attention",
    "text": "Multi Head Attention\n\nThere are multiple attention heads, each with their own independent queries, keys, values.\nEach attention head takes the input embeddings of shape (B, T, C) and produces an output (B, T, H).\nConcatenate the outputs from each head so that the concatenated tensor is back to the original input shape (B, T, C).\nOnce we have the concatenated output tensor, we put it through a linear projection, nn.Linear(embed_dim, embed_dim) to get the output from the multi head attention: a tensor of shape (B, T, C)."
  },
  {
    "objectID": "posts/dspy/dspy.html",
    "href": "posts/dspy/dspy.html",
    "title": "DSPy",
    "section": "",
    "text": "Intro\nDSPy kept popping up on my X timeline and I thought it looked pretty interesting, so I decided to take a few days to look into it. I didn’t get super deep into it yet, but I think I have a high level understanding. The library is fairly new IMO (as of writing this). There is excitement around it though and a growing community. I am hopeful that the documentation and library will continue to improve throughout the year. If you are completely new to DSPy I would suggest the following resources below.\n\nRead through the newer documentation here.\nCheckout the README from DSPY GitHub repo and the examples there.\nTry and code up some simple examples on your own data.\nCheckout the Discord server.\nSkim through or read some of the associated papers (see the paper links on the DSPy repo README). For example:\n\nDSPy: Compiling Declarative Language Model Calls into Self-Improving Pipelines(Khattab et al. (2023))\nDSPy Assertions: Computational Constraints for Self-Refining Language Model Pipelines(Singhvi et al. (2024))\n\nThere are also some decent videos on YouTube. Simply Search for DSPy LLM etc.\nFollow Omar Khattab\n\n\n\nENV Setup\npython3 -m venv env\nsource env/bin/activate\npip install dspy-ai\npip install openai --upgrade\npip install --upgrade notebook ipywidgets\nimport os\nos.environ[\"OPENAI_API_KEY\"] = \"YOUR_OPENAI_API_KEY\"\n\n\nBIG-Bench Hard Dataset - Penguins In a Table - Example\nWithin the BIG-Bench Hard dataset (Suzgun et al. 2022) there are various tasks. You can use one of these strings when using load_dataset to load in the corresponding records for that task.\n['tracking_shuffled_objects_seven_objects', 'salient_translation_error_detection', 'tracking_shuffled_objects_three_objects', 'geometric_shapes', 'object_counting', 'word_sorting', 'logical_deduction_five_objects', 'hyperbaton', 'sports_understanding', 'logical_deduction_seven_objects', 'multistep_arithmetic_two', 'ruin_names', 'causal_judgement', 'logical_deduction_three_objects', 'formal_fallacies', 'snarks', 'boolean_expressions', 'reasoning_about_colored_objects', 'dyck_languages', 'navigate', 'disambiguation_qa', 'temporal_sequences', 'web_of_lies', 'tracking_shuffled_objects_five_objects', 'penguins_in_a_table', 'movie_recommendation', 'date_understanding']\nWe will use the penguins_in_a_table task.\n\n\nCode\nfrom datasets import load_dataset\nimport dspy\n\nds = load_dataset(\"maveriq/bigbenchhard\", \"penguins_in_a_table\")[\"train\"]\nexamples = [dspy.Example({\"question\": r[\"input\"], \"answer\": r[\"target\"]}).with_inputs(\"question\") for r in ds]\nprint(f\"There are {len(examples)} examples.\")\ntrainset = examples[0:20]\nvalset = examples[20:]\n\n\nThere are 146 examples.\n\n\n\n\nCode\nexample = trainset[10]\nfor k, v in example.items():\n    print(f\"\\n{k.upper()}:\\n\")\n    print(v)\n\n\n\nQUESTION:\n\nHere is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  We then delete the penguin named Bernard from the table.\nHow many penguins are more than 8 years old?\nOptions:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5\n\nANSWER:\n\n(A)\n\n\nWe will use the DSPy OpenAI connector to make calls to gpt-3.5. Note that DSPy caches API calls so that subsequent calls with the same input will read from the cache instead of calling the OpenAI API a second time.\n\n\nCode\nllm = dspy.OpenAI(model=\"gpt-3.5-turbo-0125\", max_tokens=250)\ndspy.settings.configure(lm=llm)\n\n\nWe can test that the calls to OpenAI are working:\n\n\nCode\nllm(\"Testing testing, is anyone out there?\")\n\n\n[\"Hello! I'm here to help. What can I assist you with today?\"]\n\n\n\n\nCode\nllm(example.question)\n\n\n['There are 2 penguins who are more than 8 years old: Vincent (9 years old) and Gwen (8 years old). \\n\\nTherefore, the answer is (B) 2.']\n\n\nAt any point we can look at the last n calls to the llm:\n\n\nCode\nllm.inspect_history(n=2)\n\n\n\n\n\n\nTesting testing, is anyone out there? Hello! I'm here to help. What can I assist you with today?\n\n\n\n\n\n\n\nHere is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  We then delete the penguin named Bernard from the table.\nHow many penguins are more than 8 years old?\nOptions:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5 There are 2 penguins who are more than 8 years old: Vincent (9 years old) and Gwen (8 years old). \n\nTherefore, the answer is (B) 2.\n\n\n\n\nOur evaluation metric will check if the llm output contains the correct multiple choice answer. To define an evaluation metric in DSPy we create a function like the example below. The first two inputs should be instances of dspy.Example. The metric function can contain any logic you need to evaluate your task. You can read more about the trace argument in the documentation. It needs to be there, even if not explicitly using it.\n\n\nCode\nimport re\n\n\ndef eval_metric(true, prediction, trace=None):\n    pred = prediction.answer\n    matches = re.findall(r\"\\([A-Z]\\)\", pred)\n    parsed_answer = matches[-1] if matches else \"\"\n    return parsed_answer == true.answer\n\n\nWe set up an evaluation pipeline:\n\n\nCode\nfrom dspy.evaluate import Evaluate\n\nevaluate = Evaluate(devset=valset, metric=eval_metric, num_threads=6, display_progress=True, display_table=10)\n\n\nHere is a simple module in DSPy for basic question and answer.\n\n\nCode\nclass BasicQA(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.prog = dspy.Predict(\"question -&gt; answer\")\n\n    def forward(self, question):\n        return self.prog(question=question)\n\n\nbasic_qa = BasicQA()\n\n\nThe forward method calls __call__ similar to how things work in pytorch.\n\n\nCode\npred = basic_qa(question=example.question)\nprint(\"\\nQUESTION:\\n\")\nprint(example.question)\nprint(\"\\nANSWER:\\n\")\nprint(example.answer)\nprint(\"\\nPREDICTION:\\n\")\nprint(pred.answer)\n\n\n\nQUESTION:\n\nHere is a table where the first line is a header and each subsequent line is a penguin:  name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15  For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm.  We then delete the penguin named Bernard from the table.\nHow many penguins are more than 8 years old?\nOptions:\n(A) 1\n(B) 2\n(C) 3\n(D) 4\n(E) 5\n\nANSWER:\n\n(A)\n\nPREDICTION:\n\n(B) 2\n\n\n\n\nCode\neval_metric(example, pred)\n\n\nFalse\n\n\n\n\nCode\nllm.inspect_history(n=1)\n\n\n\n\n\n\nGiven the fields `question`, produce the fields `answer`.\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\nAnswer: ${answer}\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. We then delete the penguin named Bernard from the table. How many penguins are more than 8 years old? Options: (A) 1 (B) 2 (C) 3 (D) 4 (E) 5\nAnswer: (B) 2\n\n\n\n\nNow we can pass each example question through the LLM in the validation set and check if we get the correct answer:\n\n\nCode\nevaluate(basic_qa)\n\n\nAverage Metric: 44 / 126  (34.9%)\n\n\n\n\n\n\n\n \nquestion\nexample_answer\npred_answer\neval_metric\n\n\n\n\n0\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\n3\nFalse\n\n\n1\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\n(C) 50\nFalse\n\n\n2\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nAnswer: (C) 3\nFalse\n\n\n3\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nAnswer: (B) 2\nFalse\n\n\n4\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(B)\n(B) 5\n✔️ [True]\n\n\n5\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\n(B) 2\nFalse\n\n\n6\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(E)\nJames\nFalse\n\n\n7\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\n(B) 2\nFalse\n\n\n8\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\nAnswer: Vincent\nFalse\n\n\n9\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\nAnswer: Donna\nFalse\n\n\n\n\n\n\n                \n                    ... 116 more rows not displayed ...\n                \n                \n\n\n34.92\n\n\nDSPy uses optimizers to optimize the modules. In this example, optimization is a process that will choose which demos/examples are best to put into the prompt in order to increase the evaluation metric. At the time of writing the optimizers are called teleprompters (prompting from a distance). I think they will change the name though to optimizers in future refactoring. The DSPy documentation states that the optimizer can adjust/edit:\n\nDemo examples in the prompt.\nInstructions of the prompt.\nWeights of the actual LLM (for example fine tuning an open source model).\n\nI have only played around with optimizers that optimize which demos/examples are put into the prompt.\n\n\nCode\nfrom dspy.teleprompt import BootstrapFewShotWithRandomSearch\n\nconfig = dict(max_bootstrapped_demos=2, max_labeled_demos=4, num_candidate_programs=2, num_threads=6)\n\nteleprompter = BootstrapFewShotWithRandomSearch(metric=eval_metric, **config)\noptimized_qa = teleprompter.compile(basic_qa, trainset=trainset, valset=valset)\n\n\nThere is a lot of output from the above code block which I am hiding to keep things cleaner. You can now evaluate the optimized model to see if the accuracy has improved.\n\n\nCode\nevaluate(optimized_qa)\n\n\nAverage Metric: 54 / 126  (42.9%)\n\n\n\n\n\n\n\n \nquestion\nexample_answer\npred_answer\neval_metric\n\n\n\n\n0\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\n(C)\nFalse\n\n\n1\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\n(C) 50\nFalse\n\n\n2\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\n(B)\nFalse\n\n\n3\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\n(B)\nFalse\n\n\n4\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(B)\n(B)\n✔️ [True]\n\n\n5\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\n(C)\n✔️ [True]\n\n\n6\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(E)\n(D)\nFalse\n\n\n7\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\n(B)\nFalse\n\n\n8\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\n(D) Gwen\nFalse\n\n\n9\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\n(D) Donna\n✔️ [True]\n\n\n\n\n\n\n                \n                    ... 116 more rows not displayed ...\n                \n                \n\n\n42.86\n\n\n\n\nCode\nllm.inspect_history()\n\n\n\n\n\n\nGiven the fields `question`, produce the fields `answer`.\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\nAnswer: ${answer}\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. And here is a similar table, but listing giraffes: name, age, height (cm), weight (kg) Jody, 5, 430, 620 Gladys, 10, 420, 590 Marian, 2, 310, 410 Donna, 9, 440, 650 How many giraffes are more than 5 years old? Options: (A) 1 (B) 2 (C) 3 (D) 4 (E) 5\nAnswer: (B)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. What is the name of the last penguin sorted by alphabetic order? Options: (A) Louis (B) Bernard (C) Vincent (D) Gwen (E) James\nAnswer: (C)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. We now add a penguin to the table: James, 12, 90, 12 We then delete the penguin named Bernard from the table. How many penguins are more than 5 years old and weight more than 12 kg? Options: (A) 1 (B) 2 (C) 3 (D) 4 (E) 5\nAnswer: (A)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. How many animals are listed in the table? Options: (A) 1 (B) 2 (C) 3 (D) 4 (E) 5\nAnswer: (D)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. Which is the second heaviest penguin? Options: (A) Louis (B) Bernard (C) Vincent (D) Gwen (E) James\nAnswer: (B) Bernard\n\n\n\n\nNow we can try a Chain of Thought (Wei et al. 2023) prompt.\n\n\nCode\nclass CoT(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.prog = dspy.ChainOfThought(\"question -&gt; answer\")\n\n    def forward(self, question):\n        return self.prog(question=question)\n\n\ncot_qa = CoT()\n\n\n\n\nCode\nevaluate(cot_qa)\n\n\nAverage Metric: 90 / 126  (71.4%)\n\n\n\n\n\n\n\n \nquestion\nexample_answer\nrationale\npred_answer\neval_metric\n\n\n\n\n0\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. We first identify the penguins who are less than 8 years old. From the table, we see that Louis is 7 years...\n(B) 2\nFalse\n\n\n1\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\nproduce the answer. We need to add up the weights of all the penguins in the table. Louis weighs 11 kg, Bernard weighs 13 kg,...\n(D) 62\n✔️ [True]\n\n\n2\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. We need to go through each penguin's age and count how many are more than 8 years old.\n(C) 3\nFalse\n\n\n3\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. We need to identify the penguins who are both more than 5 years old and weigh more than 12 kg. Looking at...\n(C) 3\nFalse\n\n\n4\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(B)\nproduce the answer. We can see from the table that Bernard's age is 5.\n(B) 5\n✔️ [True]\n\n\n5\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\nproduce the answer. We first identify the penguins who are less than 10 years old. Louis is 7 years old, Bernard is 5 years old,...\n(D) 4\nFalse\n\n\n6\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(E)\nproduce the answer. We need to identify the last penguin added to the table. By looking at the last entry in the penguin table, we...\nJames\nFalse\n\n\n7\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. We first need to identify the penguins who are more than 5 years old and weigh more than 12 kg. From the...\n(A) 1\n✔️ [True]\n\n\n8\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\nproduce the answer. We need to find the penguin with a height of 60 cm. Looking at the table, we see that Vincent is the...\n(C) Vincent\n✔️ [True]\n\n\n9\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\nproduce the answer. We need to look at the last entry in the table listing giraffes. The last giraffe listed is Donna.\n(D) Donna\n✔️ [True]\n\n\n\n\n\n\n                \n                    ... 116 more rows not displayed ...\n                \n                \n\n\n71.43\n\n\n\n\nCode\nllm.inspect_history()\n\n\n\n\n\n\nGiven the fields `question`, produce the fields `answer`.\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\nAnswer: ${answer}\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. We now add a penguin to the table: James, 12, 90, 12 Which penguin is taller than the other ones? Options: (A) Louis (B) Bernard (C) Vincent (D) Gwen (E) James\nReasoning: Let's think step by step in order to produce the answer. We need to compare the height of each penguin in the table and determine which one is the tallest. Louis is 50 cm tall, Bernard is 80 cm tall, Vincent is 60 cm tall, Gwen is 70 cm tall, and James is 90 cm tall. Therefore, James is taller than all the other penguins.\nAnswer: (E) James\n\n\n\n\nNow we will try and optimize our chain of thought program. I am also hiding the output from this cell to keep things cleaner.\n\n\nCode\ntqdm._instances.clear()\nconfig = dict(max_bootstrapped_demos=1, max_labeled_demos=4, num_candidate_programs=4, num_threads=6)\nteleprompter = BootstrapFewShotWithRandomSearch(metric=eval_metric, **config)\noptimized_cot_qa = teleprompter.compile(cot_qa, trainset=trainset, valset=valset)\n\n\n\n\nCode\nevaluate(optimized_cot_qa)\n\n\nAverage Metric: 102 / 126  (81.0%)\n\n\n\n\n\n\n\n \nquestion\nexample_answer\nrationale\npred_answer\neval_metric\n\n\n\n\n0\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. After deleting Bernard, the penguins left are Louis, Vincent, and Gwen. Among them, Louis and Gwen are less than 8 years old.\n(B) 2\nFalse\n\n\n1\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\nproduce the answer. We sum up the weights of all the penguins: 11 + 13 + 11 + 15 + 12 = 62.\n(D) 62\n✔️ [True]\n\n\n2\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. We know that after deleting Bernard, the penguins left are Louis, Vincent, and Gwen. Among them, only Vincent is more than 8...\n(A) 1\n✔️ [True]\n\n\n3\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. We have Louis, Vincent, Gwen, and James in the table. Among them, only James is more than 5 years old and weighs...\n(A) 1\n✔️ [True]\n\n\n4\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(B)\nproduce the answer. We know that the age of Bernard is 5 years old.\n(B) 5\n✔️ [True]\n\n\n5\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\nproduce the answer. We know that after deleting Bernard, the penguins left are Louis, Vincent, and Gwen. Among them, Louis and Gwen are less than...\n(B) 2\nFalse\n\n\n6\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(E)\nproduce the answer. We know that the last penguin added to the table is James.\n(E) James\n✔️ [True]\n\n\n7\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(A)\nproduce the answer. After deleting Bernard, we are left with Louis, Vincent, and Gwen. Among them, only Gwen is more than 5 years old and...\n(A) 1\n✔️ [True]\n\n\n8\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(C)\nproduce the answer. We know that the only penguin with a height of 60 cm is Vincent.\n(C) Vincent\n✔️ [True]\n\n\n9\nHere is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis,...\n(D)\nproduce the answer. We know that the last giraffe listed is Donna.\n(D) Donna\n✔️ [True]\n\n\n\n\n\n\n                \n                    ... 116 more rows not displayed ...\n                \n                \n\n\n80.95\n\n\n\n\nCode\nllm.inspect_history(n=1)\n\n\n\n\n\n\nGiven the fields `question`, produce the fields `answer`.\n\n---\n\nFollow the following format.\n\nQuestion: ${question}\nReasoning: Let's think step by step in order to ${produce the answer}. We ...\nAnswer: ${answer}\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. We then delete the penguin named Bernard from the table. How many penguins are more than 8 years old? Options: (A) 1 (B) 2 (C) 3 (D) 4 (E) 5\nReasoning: Let's think step by step in order to produce the answer. We know that after deleting Bernard, the penguins left are Louis, Vincent, and Gwen. Among them, only Vincent is more than 8 years old.\nAnswer: (A) 1\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. How many penguins are more than 5 years old? Options: (A) 1 (B) 2 (C) 3 (D) 4 (E) 5\nAnswer: (C)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. And here is a similar table, but listing giraffes: name, age, height (cm), weight (kg) Jody, 5, 430, 620 Gladys, 10, 420, 590 Marian, 2, 310, 410 Donna, 9, 440, 650 How many animals are more than 5 years old? Options: (A) 5 (B) 6 (C) 7 (D) 8 (E) 9\nAnswer: (A)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. Which penguin is older than Gwen? Options: (A) Louis (B) Bernard (C) Vincent (D) Gwen (E) James\nAnswer: (C)\n\n---\n\nQuestion: Here is a table where the first line is a header and each subsequent line is a penguin: name, age, height (cm), weight (kg) Louis, 7, 50, 11 Bernard, 5, 80, 13 Vincent, 9, 60, 11 Gwen, 8, 70, 15 For example: the age of Louis is 7, the weight of Gwen is 15 kg, the height of Bernard is 80 cm. We then delete the penguin named Bernard from the table. What is the name of the last penguin sorted by alphabetic order? Options: (A) Louis (B) Bernard (C) Vincent (D) Gwen (E) James\nReasoning: Let's think step by step in order to produce the answer. After deleting Bernard, the remaining penguins are Louis, Vincent, and Gwen. Sorting them alphabetically, the last penguin is Vincent.\nAnswer: (C) Vincent\n\n\n\n\nIt’s really nice that the above focused on:\n\nWriting small modules/programs.\nChoosing an optimizer.\nRunning the compile/optimization step.\nRunning an evaluation.\n\nI really like this idea instead of manually writing prompts and hoping for the best.\n\n\n\n\n\nReferences\n\nKhattab, Omar, Arnav Singhvi, Paridhi Maheshwari, Zhiyuan Zhang, Keshav Santhanam, Sri Vardhamanan, Saiful Haq, et al. 2023. “DSPy: Compiling Declarative Language Model Calls into Self-Improving Pipelines.” https://arxiv.org/abs/2310.03714.\n\n\nSinghvi, Arnav, Manish Shetty, Shangyin Tan, Christopher Potts, Koushik Sen, Matei Zaharia, and Omar Khattab. 2024. “DSPy Assertions: Computational Constraints for Self-Refining Language Model Pipelines.” https://arxiv.org/abs/2312.13382.\n\n\nSuzgun, Mirac, Nathan Scales, Nathanael Schärli, Sebastian Gehrmann, Yi Tay, Hyung Won Chung, Aakanksha Chowdhery, et al. 2022. “Challenging BIG-Bench Tasks and Whether Chain-of-Thought Can Solve Them.” arXiv Preprint arXiv:2210.09261.\n\n\nWei, Jason, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter, Fei Xia, Ed Chi, Quoc Le, and Denny Zhou. 2023. “Chain-of-Thought Prompting Elicits Reasoning in Large Language Models.” https://arxiv.org/abs/2201.11903."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chris Levy",
    "section": "",
    "text": "Hello! I’m Chris Levy. I work in ML/AI and backend Python development."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Chris Levy",
    "section": "About Me",
    "text": "About Me\nI spent a good amount of time in school where I completed a PhD in applied math back in 2015. After graduating I shifted away from academia and started working in industry. I mostly do backend python development these days, and build ML/AI applications/services. I work across the entire stack from research, to training and evaluating models, to deploying models, and getting in the weeds of the infrastructure and devops pipelines.\nOutside of AI/ML stuff, I enjoy spending time with my family and three kids, working out, swimming, cycling, and playing guitar."
  }
]